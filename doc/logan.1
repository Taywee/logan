.TH LOGAN 1 2015-08-28 GNU
.SH NAME
logan \- log frequency analyzer
.SH SYNOPSIS
.B logan
[\fIOPTION\fR]...
[\fIFILE\fR]...
.SH DESCRIPTION
.B logan

Processes and provides frequency analysis of log files.  Optionally provides a
specific matching percentage for approximate message matching, with hashing
optimization for exact matching.

If no files are given, stdin is used instead.

The timestamp is expected to be first in order.  If the timestamp is not first,
use the regex mangling to put it first.

.SS Output Type

Output type may be one of the following:

.TP
.BR CSV
Output the entire report in CSV format
.TP
.BR Report
Output the latest timeslice in email format

.SH OPTIONS
.TP
.BR \-f " " \fIformat\fR
Time formatter. Default is "%F %T"
.TP
.BR \-h
Show this help menu.
.TP
.BR \-m " " \fIminimum\fR
Minimum matches needed for Report.  Default is 1.
.TP
.BR \-o " " \fItype\fR
Output type.
.TP
.BR \-p " " \fIratio\fR
pct match required (in a ratio 0 < p < 1).  Default is 0.8.
.TP
.BR \-r " " \fIpattern\fR
PCRE regex pattern, used in conjunction with -R to warp input to a proper
format.  Default is "^.+$"
.TP
.BR \-R " " \fIreplace\fR
Regex replacement, $$ is a literal dollar sign, and ${n} inserts the n'th
capture group. "${0}" is default
.TP
.BR \-s " " \fIminutes\fR
Slice size in minutes.  Default is 30.
.SH EXIT STATUS
returns 0 on successful execution, and 1 otherwise
.SH EXAMPLE

# Parsing a simple haproxy log into 60-minute slices, doing only exact matches, and only matching the status code, the exact request, and the backend

logan -s 60 -p 1.0 -o r -m 1 -f '%d/%b/%Y:%H:%M:%S' -r '\[(\d+/\w+[^\.]+)\.\d+\] (.+?) (?:-?\d+/){4}-?\d+ (\d{3}) [^"]+(".+")$' -R '${1} ${3} ${2} ${4}' /tmp/haproxy.log
